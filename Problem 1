import numpy as np


def f(x):
    return np.exp(x) * np.sin(4 * x)


a, b = 1, 2
h = 0.1
n = int((b - a) / h)


x = np.linspace(a, b, n + 1)
y = f(x)


trap = (h / 2) * (y[0] + 2 * np.sum(y[1:-1]) + y[-1])

if n % 2 != 0:
    raise ValueError("n 必須是偶數才能用 Simpson's Rule")

simpson = (h / 3) * (y[0] +
                     4 * np.sum(y[1:n:2]) +
                     2 * np.sum(y[2:n-1:2]) +
                     y[-1])

midpoints = np.linspace(a + h/2, b - h/2, n)
mid_y = f(midpoints)
midpoint = h * np.sum(mid_y)

print("Composite Trapezoidal Rule:", trap)
print("Composite Simpson's Rule:", simpson)
print("Composite Midpoint Rule:", midpoint)
