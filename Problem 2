import numpy as np
from numpy.polynomial.legendre import leggauss
from scipy.integrate import quad

def f(x):
    return x**2 * np.log(x)


a, b = 1, 1.5


def gaussian_quadrature(f, a, b, n):
    [x_i, w_i] = leggauss(n)  

    t = 0.5 * (b - a) * x_i + 0.5 * (b + a)  
    return 0.5 * (b - a) * np.sum(w_i * f(t))


gauss_n3 = gaussian_quadrature(f, a, b, 3)
gauss_n4 = gaussian_quadrature(f, a, b, 4)


exact, _ = quad(f, a, b)


print("Gaussian Quadrature (n=3):", gauss_n3, "%err = ", (gauss_n3-exact)/exact*100)
print("Gaussian Quadrature (n=4):", gauss_n4, "%err = ", (gauss_n4-exact)/exact*100)
print("Exact Value:", exact)
